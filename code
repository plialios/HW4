```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(shiny) 
library(plotly)
```

```{R}
breast_cancer <- read.csv("https://uwmadison.box.com/shared/static/hv002pb690i0rjjn7ysm642wcn6rywzf.csv")
```

## PCA
```{R}
# Extract tumor_stage and tumor_size 
tumor_stage <- breast_cancer$tumor_stage 
tumor_size <- breast_cancer$tumor_size 

# Exclude the first 31 columns and ensure the rest are numeric 
pca_data <- breast_cancer[, -c(1:31)] 
pca_data <- pca_data[, sapply(pca_data, is.numeric)] # Remove rows with NAs in pca_data and corresponding rows in tumor_stage and tumor_size 
complete_cases <- complete.cases(pca_data) 
pca_data <- pca_data[complete_cases, ] 
tumor_stage <- tumor_stage[complete_cases] 
tumor_size <- tumor_size[complete_cases] 

# Perform PCA 
pca <- prcomp(pca_data, center = TRUE, scale. = TRUE) 
pca_data <- as.data.frame(pca$x) 

# Combine PCA results with tumor_stage and tumor_size 
pca_data$tumor_stage <- tumor_stage 
pca_data$tumor_size <- tumor_size

```

## Shiny App
```{R}
# Define UI for application
ui <- fluidPage( 
  titlePanel("PCA of Breast Cancer Dataset"), plotlyOutput("pcaPlot") ) 

# Define server logic
server <- function(input, output) {
  output$pcaPlot <- renderPlotly({plot_ly(
    pca_data, x = ~PC1, y= ~PC2, 
    type = "scatter", mode = "markers", color = ~tumor_stage, 
    text = ~paste("Tumor Size:", tumor_size), 
    hoverinfo= "text") %>%
      layout(
        title = "PCA Plot", 
        xaxis = list(title = "PC1"), 
        yaxis = list(title = "PC2")) %>% 
      event_register("plotly_click")})
  
  observeEvent(event_data("plotly_click"), {
    d<- event_data("plotly_click")
    if (length(d)) {
      showModal(modalDialog(
        title = "Tumor Size", 
        paste("Tumor Size:", pca_data$tumor_size[d$pointNumber + 1])
      ))
    }
  }
      )
}
shinyApp(ui, server)

```
